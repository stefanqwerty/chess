#pragma checksum "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9fce3c4eac0dd55c1f0e18fc8da397441cd747b2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_HelloWorld_Index), @"mvc.1.0.view", @"/Views/HelloWorld/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\stefa\source\repos\api\Views\_ViewImports.cshtml"
using api;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9fce3c4eac0dd55c1f0e18fc8da397441cd747b2", @"/Views/HelloWorld/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"67d6a14d96427759ddc0242e0b2a86994e0598fe", @"/Views/_ViewImports.cshtml")]
    public class Views_HelloWorld_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onresize", new global::Microsoft.AspNetCore.Html.HtmlString("ArrangePieces()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onclick", new global::Microsoft.AspNetCore.Html.HtmlString("MoveIfNecessary(event)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("onload", new global::Microsoft.AspNetCore.Html.HtmlString("ArrangePieces()"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9fce3c4eac0dd55c1f0e18fc8da397441cd747b24120", async() => {
                WriteLiteral("\r\n    <div class=\"imgbox\">\r\n        <img class=\"chess-board\" id=\"ChessBoard\"");
                BeginWriteAttribute("src", " src=\"", 210, "\"", 256, 1);
#nullable restore
#line 7 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
WriteAttributeValue("", 216, Url.Content("~/images/Chess_Board.png"), 216, 40, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(" alt=\"Chess Board\">\r\n\r\n        <button type=\"button\" onclick=\"ArrangePieces()\">Click me!</button>\r\n\r\n");
#nullable restore
#line 11 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
          

            var ChessBoard = new int[8, 8];

            var FlipBoard = 1;

            var Pawn = 1;
            var Rook = 2;
            var Knight = 3;
            var BlackBishop = 4;
            var WhiteBishop = 5;
            var Queen = 6;
            var King = 7;

            var PiecesImgages = new string[15];

            PiecesImgages[1] = "white_pawn.png";
            PiecesImgages[2] = "white_rook.png";
            PiecesImgages[3] = "white_knight.png";
            PiecesImgages[4] = "white_bishop.png";
            PiecesImgages[5] = "white_bishop.png";
            PiecesImgages[6] = "white_queen.png";
            PiecesImgages[7] = "white_king.png";

            PiecesImgages[8] = "black_pawn.png";
            PiecesImgages[9] = "black_rook.png";
            PiecesImgages[10] = "black_knight.png";
            PiecesImgages[11] = "black_bishop.png";
            PiecesImgages[12] = "black_bishop.png";
            PiecesImgages[13] = "black_queen.png";
            PiecesImgages[14] = "black_king.png";

            for (var i = 0; i < 8; i++)
            {
                ChessBoard[1, i] = 7 + Pawn;
            }

            for (var i = 0; i < 8; i++)
            {
                ChessBoard[6, i] = Pawn;
            }

            ChessBoard[0, 0] = 7 + Rook;
            ChessBoard[0, 7] = 7 + Rook;

            ChessBoard[0, 1] = 7 + Knight;
            ChessBoard[0, 6] = 7 + Knight;

            ChessBoard[0, 2] = 7 + BlackBishop;
            ChessBoard[0, 5] = 7 + WhiteBishop;

            ChessBoard[0, 3] = 7 + Queen;
            ChessBoard[0, 4] = 7 + King;

            ChessBoard[7, 0] = Rook;
            ChessBoard[7, 7] = Rook;

            ChessBoard[7, 1] = Knight;
            ChessBoard[7, 6] = Knight;

            ChessBoard[7, 2] = BlackBishop;
            ChessBoard[7, 5] = WhiteBishop;

            ChessBoard[7, 3] = Queen;
            ChessBoard[7, 4] = King;

            for (var i = 0; i < 8; i++)
            {
                for (var j = 0; j < 8; j++)
                {
                    var PieceValue = ChessBoard[i, j];
                    if (PieceValue > 0)
                    {
                        var Filename = $"~/images/{PiecesImgages[PieceValue]}";

#line default
#line hidden
#nullable disable
                WriteLiteral("                        <img class=\"chess-pieces\"");
                BeginWriteAttribute("id", " id=\"", 2733, "\"", 2751, 3);
                WriteAttributeValue("", 2738, "piece", 2738, 5, true);
#nullable restore
#line 85 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
WriteAttributeValue("", 2743, i, 2743, 4, false);

#line default
#line hidden
#nullable disable
#nullable restore
#line 85 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
WriteAttributeValue("", 2747, j, 2747, 4, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                BeginWriteAttribute("src", " src=\"", 2752, "\"", 2780, 1);
#nullable restore
#line 85 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
WriteAttributeValue("", 2758, Url.Content(Filename), 2758, 22, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(" alt=\"Chess Board\">\r\n");
#nullable restore
#line 86 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
                    }
                }
            }

            void Move(int i1, int j1, int i2, int j2)
            {
                ChessBoard[i2, j2] = ChessBoard[i1, j1];
                ChessBoard[i1, j1] = 0;
            }
        

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
        <script>
            function ArrangePieces() {
                var board = document.getElementById('ChessBoard');
                var Pos = board.offsetLeft;
                var topPos = board.offsetTop;
                var boardSize = board.offsetHeight;
                var pieceSize = boardSize / 8;
                var piece;
                console.log(Pos);
                console.log(topPos);
                for (i = 0; i < 8; i++) {
                    for (j = 0; j < 8; j++) {
                        piece = document.getElementById('piece' + i + j);
                        if (piece !== null) {

                            document.getElementById('piece' + i + j).style.left = Pos + j * pieceSize + 'px';
                            document.getElementById('piece' + i + j).style.top = topPos + i * pieceSize + 'px';
                            console.log('piece' + i + j);
                        }
                    }
                }
            }

            var Mou");
                WriteLiteral(@"sePosition = null;

            var initialiindex = null;
            var initialjindex = null;

            var finaliindex;
            var finaljindex;

            function MoveIfNecessary(e) {
                var MeaningfulVariableName = e;

                if (MousePosition === null) {
                    GetMouseCoords(MeaningfulVariableName);
                    if (MousePosition !== null) {
                        TransformPosition(MousePosition);
                    }
                    return;
                }

                if (MousePosition !== null) {
                    GetMouseCoords(MeaningfulVariableName);
                    TransformPosition(MousePosition);
                    if (MousePosition !== null) {
");
#nullable restore
#line 143 "C:\Users\stefa\source\repos\api\Views\HelloWorld\Index.cshtml"
                          
                            //Move(initialiindex, initialjindex, finaliindex, finaljindex);
                                

#line default
#line hidden
#nullable disable
                WriteLiteral(@"                        ArrangePieces();
                    }
                    MousePosition = null;
                    return;
                }
            }

            function GetMouseCoords(event) {
                var xpos = event.clientX;
                var ypos = event.clientY;
                var board = document.getElementById('ChessBoard');
                var leftPos = board.offsetLeft;
                var topPos = board.offsetTop;
                var boardSize = board.offsetHeight;

                if (leftPos <= xpos && topPos <= ypos && (leftPos + boardSize) >= xpos && (topPos + boardSize) >= ypos) {
                    MousePosition = """" + xpos + "" "" + ypos;
                }
                else {
                    MousePosition = null;
                }
                console.log(MousePosition);
            }

            function TransformPosition(PointerPosition) {

                var spacePos = PointerPosition.search("" "");
                var pointer");
                WriteLiteral(@"Xpos = PointerPosition.substring(0, spacePos);
                var pointerYpos = PointerPosition.substring(spacePos + 1, PointerPosition.length);

                var board = document.getElementById('ChessBoard');
                var boardLeftPos = board.offsetLeft;
                var boardTopPos = board.offsetTop;
                var boardSize = board.offsetHeight;
                var squareSize = boardSize / 8;

                var i;
                var j;

                for (i = 0; i < 8; i++) {
                    for (j = 0; j < 8; j++) {
                        if ((i * squareSize) + boardLeftPos < pointerXpos
                            && ((i + 1) * squareSize + 1) + boardLeftPos > pointerXpos
                            && (j * squareSize) + boardTopPos < pointerYpos
                            && ((j + 1) * squareSize) + boardTopPos > pointerYpos) {
                            if (initialiindex === null) {
                                initialiindex = i;
                   ");
                WriteLiteral(@"             initialjindex = j;
                            }
                            else {
                                finaliindex = i;
                                finaljindex = j;
                            }

                        }
                    }
                }

                console.log(initialiindex);
                console.log(initialjindex);
                console.log(finaliindex);
                console.log(finaljindex);

            }

        </script>
        <script>

        </script>
    </div>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
